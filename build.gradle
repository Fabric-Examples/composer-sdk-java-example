/*
 * Copyright IBM Corp. 2017 All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

print 'The composer-sdk-java version is *' + version + '*!\n'

subprojects {
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'jacoco'

	group = 'org.hyperledger.composer'
	version = rootProject.version
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	jacoco {
		toolVersion = "0.7.+"
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		compile 'org.slf4j:slf4j-api:1.7.25'

		testCompile group: 'org.mockito', name: 'mockito-core', version: '2.8.47'
		testCompile 'org.testng:testng:6.8.1'
		testCompile 'org.skyscreamer:jsonassert:1.5.0'
		testCompile 'org.slf4j:slf4j-simple:1.7.25'
	}

	test {
		group = "verification"
		finalizedBy = [jacocoTestReport, jacocoTestCoverageVerification]
		useTestNG() {
			// current skip the test that require a local fabric server.
			excludeGroups 'fabric', 'todo', 'performance'
		}
	}

	//configurations.archives.artifacts.clear()
	artifacts {
		archives file: project.file("${buildDir}/libs/${project.name}-${version}.jar")
	}


	tasks.create(name: 'uploadInternal', type: Upload.class, group: 'upload') {
		onlyIf {
			!project.name.contains("codegen")
		}
		configuration = configurations.archives

		repositories {
			mavenDeployer {
				repository(url: "${nexusUrl}/repository/maven-releases/") {
					authentication(userName: nexusUsername, password: nexusPassword)
				}
				snapshotRepository(url: "${nexusUrl}/repository/maven-snapshots/") {
					authentication(userName: nexusUsername, password: nexusPassword)
				}
			}
		}
	}

	uploadInternal.dependsOn build

	tasks.create(name: 'licenseCheck', dependsOn: ':composer-sdk-java-codegen:codeGenerate',
			group: 'license', description: 'Checks the License part of each source file') {
		println "Checking Licences..."
		def missing = new LinkedList<File>()
		sourceSets.forEach {
			sourceSet ->
				sourceSet.allSource.findAll { !it.path.contains("build") }.each {
					file ->
						BufferedReader r = new BufferedReader(new FileReader(file))
						def line, hasSPDX = false
						while ((line = r.readLine()) != null) {
							if (line.contains("SPDX-License-Identifier")) {
								hasSPDX = true
								break
							}
						}
						if (!hasSPDX) {
							missing.add(file)
						}
				}
		}

		if (missing.isEmpty()) {
			println "All remaining files have Apache 2.0 headers"
		} else {
			def error = "The following files are missing Apache 2.0 headers:\n"
			missing.each {
				f -> error += f.getPath() + "\n"
			}
			error += "Fatal Error - All files must have a license header"
			throw new IllegalArgumentException(error)
		}
	}

	build.dependsOn licenseCheck
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none')
			options.encoding = "UTF-8"
			options.memberLevel = JavadocMemberLevel.PRIVATE
		}
	}
}


